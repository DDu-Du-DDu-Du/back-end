name: 배포 파이프라인

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      task-definition:
        required: true
        type: string
      ecs-container-name:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      alimi:
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SUBMODULES_SECRET:
        required: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULES_SECRET }}
          submodules: true

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Gradle 셋업
        uses: gradle/actions/setup-gradle@v3

      - name: 빌드 권한 부여
        run: chmod +x gradlew

      - name: 프로젝트 빌드
        run: ./gradlew build -x test

      - name: AWS Credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 빌드 후 배포
        id: build-docker
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ddudu-ecr
          IMAGE_TAG: ${{ github.sha }}
          PROFILE: ${{ inputs.env }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg PROFILE=$PROFILE .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: ECS Task Definition 생성
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.task-definition }}
          container-name: ${{ inputs.ecs-container-name }}
          image: ${{ steps.build-docker.outputs.image }}

      - name: ECS Task 실행
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ inputs.ecs-service }}
          cluster: ${{ inputs.ecs-cluster }}
          wait-for-service-stability: true

      - name: 배포 성공 알리미
        uses: slackapi/slack-github-action@v1.24.0
        if: inputs.alimi && success()
        with:
          payload: |
            {
              "text": "🎊${{ inputs.env }} 서버 업데이트 있습니다🎊",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "**🚀${{ github.event.pull_request.title }}🌠**\nPR 링크: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_ALIMI_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK