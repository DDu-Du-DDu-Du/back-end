plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.devcourse'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = '0.8.11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Driving Adapter (Including Lombok, Spring Boot Test)
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Test
    testImplementation 'org.springframework.security:spring-security-test'

    // Application Core (Including Spring Boot Web, Resource Server)
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'

    // Guava
    implementation 'com.google.guava:guava:33.2.0-jre'

    // Faker
    implementation 'net.datafaker:datafaker:2.0.2'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Persistence Adapter
    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // MySql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // External API Adapter (Including Spring Boot Web)
    // Retry
    implementation 'org.springframework.retry:spring-retry'
}

def querydslSrcDir = 'src/main/generated'

compileJava {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

processResources.dependsOn('copyMainSecret')
processTestResources.dependsOn('copyTestSecret')

tasks.register('copyMainSecret', Copy) {
    from './secrets/main'
    include 'application*.yaml'
    into './src/main/resources'
}

tasks.register('copyTestSecret', Copy) {
    from './secrets/test'
    include 'application*.yaml'
    into './src/test/resources'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    useJUnitPlatform {
        exclude("com/ddudu/old/**")
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false

        html.outputLocation = layout.buildDirectory.dir('jacocoReports/html')
        xml.outputLocation = layout.buildDirectory.file('jacocoReports/jacoco.xml')
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            includes = [
                    '*.application.service.*',
                    '*.application.*.service.*'
            ]

            excludes = ["*.Q*"]
        }
    }
}

clean {
    delete file(querydslSrcDir)
}
